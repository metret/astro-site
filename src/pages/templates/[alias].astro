---
import { getCollection, render } from "astro:content";
import BlogPostContent from "~/components/blocks/BlogPostContent.astro";
import BlogPostHero from "~/components/blocks/BlogPostHero.astro";
import Dots from "~/components/Dots.astro";
import PageLayout from "~/layouts/PageLayout.astro";
import Newsletter from "~/components/blocks/Newsletter.astro";
import PostCard from "~/components/blocks/PostCard.astro";
import SignUp from "~/components/blocks/SignUp.astro";
import type { Props as AstroSEOProps } from "astro-seo";
import { articleMeta, dynamicImportImage } from "~/utils";
import LinkButton from "~/components/ui/LinkButton.astro";
import LinkArrowButton from "~/components/ui/LinkArrowButton.astro";
import TemplateTag from "~/components/blocks/TemplateTag.astro";
import LeftArrowLinkButton from "~/components/ui/LeftArrowLinkButton.astro";
import TemplateCard from "~/components/blocks/TemplateCard.astro";
import seedrandom from "seedrandom";

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const templates = await getCollection("templates");

  return templates.map((template) => ({
    params: { alias: template.data.alias },
    props: { template },
  }));
}

// 2. For your template, you can get the entry directly from the prop
const { template } = Astro.props;

const templates = await getCollection("templates");

const rand = seedrandom(template.data.id);

const lookup = new Map(templates.map((tmpl) => [tmpl.data.id, rand()]));

const similar = templates
  .filter(
    (tmpl) =>
      tmpl.id !== template.id &&
      tmpl.data.tags.some((x: any) => x.name === template.data.tags[0].name)
  )
  .sort((a, b) => lookup.get(a.id) - lookup.get(b.id))
  .slice(0, 3);

// 3. Generate SEO props
// const seo = await articleMeta({
//   title: post.data.title,
//   description: post.data.description,
//   type: "article",
//   image: post.data.image,
//   authorName: post.data.authorName,
//   category: post.data.category,
//   publishedDate: post.data.publishedDate,
//   modifiedDate: post.data.modifiedDate,
// });
---

<PageLayout title={`${template.data.label} | Metro Retro`}>
  <!-- Template Badge -->

  <section class="px-4 py-8">
    <div class="mx-auto max-w-[80rem] space-y-6">
      <div class="mt-auto flex flex-wrap gap-2 pt-4">
        {
          template.data.tags.map((tag) => (
            <TemplateTag name={tag.label} color={tag.color} />
          ))
        }
      </div>

      <div class="grid max-w-[80rem] grid-cols-2 gap-16">
        <div class="space-y-6">
          <h1 class="text-6xl font-semibold text-black">
            {template.data.label}
          </h1>
          <LeftArrowLinkButton href="/">All Templates</LeftArrowLinkButton>
        </div>

        <div class="space-y-6">
          <p class="text-lg text-gray-300">{template.data.description}</p>
          <LinkButton href="/" class="">Use this template</LinkButton>
        </div>
      </div>
    </div>
  </section>

  <section class="px-4 py-8">
    <div
      class="shadow-mr relative mx-auto max-w-[80rem] overflow-hidden rounded-4xl border-1 border-blue-200/15"
    >
      <div
        data-on-activate
        class="absolute inset-0 cursor-pointer opacity-0 hover:opacity-100"
      >
        <div
          class="absolute top-1/2 left-1/2 z-10 flex -translate-x-1/2 -translate-y-1/2 items-center justify-center rounded-xl bg-blue-200/50 p-4 text-center text-2xl font-semibold text-white"
        >
          Click to activate
        </div>
      </div>
      <iframe
        id="metret-iframe"
        src={`https://metroretro.io/TP/${template.data.id}?ui=0&camera=auto`}
        frameborder="0"
        scrolling="no"
        width="100%"
        height="800px"
      >
      </iframe>
    </div>
  </section>
  <section class="px-4 py-16">
    <div class="mx-auto max-w-[80rem] space-y-6">
      <h2 class="text-center text-3xl font-medium">
        Other templates you might like
      </h2>
      <div
        class="grid grid-cols-1 gap-6 py-6 md:grid-cols-2 lg:grid-cols-3 lg:py-4"
      >
        {
          similar.map((tmpl) => (
            <TemplateCard
              href={`/templates/${tmpl.data.alias}`}
              image={tmpl.data.thumbUrl}
              name={tmpl.data.label}
              description={tmpl.data.description}
              tags={tmpl.data.tags}
            />
          ))
        }
      </div>
    </div>
  </section>
</PageLayout>
<script>
  const onActivate = document.querySelector("[data-on-activate]");

  if (onActivate) {
    onActivate.addEventListener("click", () => {
      // Remove self
      onActivate.remove();
    });
  }
</script>
