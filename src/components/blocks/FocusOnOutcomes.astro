---
import Heading from "~/components/ui/Heading.astro";
import IconText from "~/components/ui/IconText.astro";
import LinkArrowButton from "~/components/ui/LinkArrowButton.astro";
import Pill from "~/components/ui/Pill.astro";
import Subheading from "~/components/ui/Subheading.astro";
import { Image } from "astro:assets";
import { dynamicImportImage } from "~/utils";

const tabs = [
  {
    title: "Improve Team Health",
    image: "~/assets/images/page-heroes/team-health.png",
    body: "Improve productivity and build a team based on trust and psychological safety",
    href: "/solutions/team-health",
    feature1: "Expertly crafted icebreakers",
    feature2: "Private writing mode",
    feature3: "Gestures, gadgets and hats!",
  },
  {
    title: "Planning Ahead",
    image: "~/assets/images/page-heroes/planning-ahead.png",
    body: "Effective planning builds structure, reduces risk and keeps your team focused on what matters.",
    href: "/solutions/planning-ahead",
    feature1: "Prioritization Templates",
    feature2: "Roadmapping Tools",
    feature3: "Action Planning",
  },
  {
    title: "Project Reviews",
    image: "~/assets/images/page-heroes/project-reviews.png",
    body: "Gain critical insights and improve future work with effective project reviews",
    href: "/solutions/project-reviews",
    feature1: "Engaging Retrospectives",
    feature2: "Import data from multiple sources",
    feature3: "Action Planning",
  },
  {
    title: "Better Collaboration",
    image: "~/assets/images/page-heroes/better-collaboration.png",
    body: "Good collaboration is built on communication, great collaboration is built on trust",
    href: "/solutions/better-collaboration",
    feature1: "Private writing mode",
    feature2: "A space design for expression",
    feature3: "Facilitator controls",
  },
  {
    title: "Team Alignment",
    image: "~/assets/images/page-heroes/team-alignment.png",
    body: "Drive efficiency with team alignment and a shared understanding of goals",
    href: "/solutions/team-alignment",
    feature1: "A single source of truth",
    feature2: "A space design for expression",
    feature3: "Action Planning",
  },
];

// Load all images
const loadedImages = await Promise.all(
  tabs.map(async (tab) => ({
    ...tab,
    loadedImage: await dynamicImportImage(tab.image),
  }))
);
---

<section class="hidden lg:block">
  <Pill color="purple">Focus on outcomes</Pill>
  <Heading class="my-6">More alignment, more success</Heading>
  <Subheading>
    Metro Retro lets you focus on what you want to achieve, not the process of
    learning complex tools and process
  </Subheading>

  <div class="mt-16 space-y-4 md:px-4 lg:hidden">
    {
      loadedImages.map((tab, index) => (
        <div>
          <button
            data-index={index}
            class="mobile-outcome-tab text-body hover:text-purple data-[active=true]:bg-purple w-full rounded-[40px] border-2 border-white bg-white px-6 py-3 text-base/6 transition-colors hover:border-purple-100 hover:bg-purple-100 data-[active=true]:text-white"
          >
            {tab.title}
          </button>

          <div class={`mobile-content-panel ${index !== 0 ? "hidden" : ""}`}>
            <div class="aspect-[1.53] w-full rounded-2xl bg-blue-100 drop-shadow-[0_3px_12px_rgba(98,116,150,0.2)]">
              <Image
                src={tab.loadedImage}
                alt={tab.title}
                class="h-full w-full rounded-2xl object-cover"
              />
            </div>
            <p class="text-lg/6 font-semibold text-black">{tab.body}</p>
            <div class="mt-6 mb-8 space-y-6">
              <IconText text={tab.feature1} class="*:[svg]:text-purple" />
              <IconText text={tab.feature2} class="*:[svg]:text-purple" />
              <IconText text={tab.feature3} class="*:[svg]:text-purple" />
            </div>
            <LinkArrowButton color="purple" href={tab.href}>
              {`More about ${tab.title}`}
            </LinkArrowButton>
          </div>
        </div>
      ))
    }
  </div>

  <div class="px-4">
    <div
      class="mx-auto my-16 w-max items-center justify-center gap-[22px] py-3 max-xl:max-w-[calc(100vw-40px)] max-xl:flex-wrap lg:flex xl:rounded-[100px] xl:bg-white xl:px-[30px] xl:drop-shadow-[0_4px_20px_rgba(98,116,150,0.25)]"
    >
      {
        loadedImages.map((tab, index) => (
          <button
            data-index={index}
            class="outcome-tab text-body hover:text-purple data-[active=true]:bg-purple rounded-[40px] border-2 border-gray-100 px-6 py-3 text-base/6 transition-colors hover:border-purple-100 hover:bg-purple-100 data-[active=true]:text-white max-xl:bg-white"
          >
            {tab.title}
          </button>
        ))
      }
    </div>
    <div class="relative">
      {/* Wrapper for desktop content panels */}
      {
        loadedImages.map((tab, index) => (
          <div
            class={`desktop-content-panel ${index !== 0 ? "hidden" : ""} mx-auto mt-16 grid max-w-[1060px] grid-cols-[456px_1fr] gap-16`}
          >
            <div>
              <p class="text-lg/6 font-semibold text-black">{tab.body}</p>
              <div class="mt-6 mb-8 space-y-6">
                <IconText text={tab.feature1} class="*:[svg]:text-purple" />
                <IconText text={tab.feature2} class="*:[svg]:text-purple" />
                <IconText text={tab.feature3} class="*:[svg]:text-purple" />
              </div>
              <LinkArrowButton color="purple" href={tab.href}>
                {`More about ${tab.title}`}
              </LinkArrowButton>
            </div>
            <div>
              <div class="aspect-[1.53] w-full rounded-2xl bg-blue-100 drop-shadow-[0_3px_12px_rgba(98,116,150,0.2)]">
                <Image
                  src={tab.loadedImage}
                  alt={tab.title}
                  class="h-full w-full rounded-2xl object-cover"
                />
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</section>
<script>
  const desktopTabs = Array.from(
    document.querySelectorAll(".outcome-tab")
  ) as HTMLButtonElement[];

  const mobileTabs = Array.from(
    document.querySelectorAll(".mobile-outcome-tab")
  ) as HTMLButtonElement[];

  const desktopContentPanels = Array.from(
    document.querySelectorAll(".desktop-content-panel")
  ) as HTMLElement[];

  const mobileContentPanels = Array.from(
    document.querySelectorAll(".mobile-content-panel")
  ) as HTMLElement[];

  function setActiveContent(activeIndex: number) {
    // Update desktop tabs
    desktopTabs.forEach((tab, index) => {
      tab.setAttribute("data-active", index === activeIndex ? "true" : "false");
    });

    // Update mobile tabs
    mobileTabs.forEach((tab, index) => {
      tab.setAttribute("data-active", index === activeIndex ? "true" : "false");
    });

    // Update desktop content panels
    desktopContentPanels.forEach((panel, index) => {
      if (index === activeIndex) {
        panel.classList.remove("hidden");
      } else {
        panel.classList.add("hidden");
      }
    });

    // Update mobile content panels
    mobileContentPanels.forEach((panel, index) => {
      if (index === activeIndex) {
        panel.classList.remove("hidden");
      } else {
        panel.classList.add("hidden");
      }
    });
  }

  // Initialize with the first tab active
  if (desktopTabs.length > 0) {
    setActiveContent(0);
  }

  // Event listeners for desktop tabs
  desktopTabs.forEach((tab) => {
    const index = parseInt(tab.getAttribute("data-index") || "0", 10);

    tab.addEventListener("click", () => {
      setActiveContent(index);
    });
  });

  // Event listeners for mobile tabs
  mobileTabs.forEach((tab) => {
    const index = parseInt(tab.getAttribute("data-index") || "0", 10);

    tab.addEventListener("click", () => {
      setActiveContent(index);
    });
  });
</script>
