---
import Heading from "~/components/ui/Heading.astro";
import IconText from "~/components/ui/IconText.astro";
import LinkArrowButton from "~/components/ui/LinkArrowButton.astro";
import Pill from "~/components/ui/Pill.astro";
import Subheading from "~/components/ui/Subheading.astro";
import { Image } from "astro:assets";
import { dynamicImportImage } from "~/utils";

const tabs = [
  {
    title: "Improve Team Health",
    image: "~/assets/images/page-heroes/team-health.png",
    body: "Improve productivity and build a team based on trust and psychological safety",
    href: "/solutions/team-health",
    features: [
      "Expertly crafted icebreakers",
      "Private writing mode",
      "Gestures, gadgets and hats!",
    ],
  },
  {
    title: "Planning Ahead",
    image: "~/assets/images/page-heroes/planning-ahead.png",
    body: "Effective planning builds structure, reduces risk and keeps your team focused on what matters.",
    href: "/solutions/planning-ahead",
    features: [
      "Prioritization Templates",
      "Roadmapping Tools",
      "Action Planning",
    ],
  },
  {
    title: "Project Reviews",
    image: "~/assets/images/page-heroes/project-reviews.png",
    body: "Gain critical insights and improve future work with effective project reviews",
    href: "/solutions/project-reviews",
    features: [
      "Engaging Retrospectives",
      "Import data from multiple sources",
      "Action Planning",
    ],
  },
  {
    title: "Better Collaboration",
    image: "~/assets/images/page-heroes/better-collaboration.png",
    body: "Good collaboration is built on communication, great collaboration is built on trust",
    href: "/solutions/better-collaboration",
    features: [
      "Private writing mode",
      "A space design for expression",
      "Facilitator controls",
    ],
  },
  {
    title: "Team Alignment",
    image: "~/assets/images/page-heroes/team-alignment.png",
    body: "Drive efficiency with team alignment and a shared understanding of goals",
    href: "/solutions/team-alignment",
    features: [
      "A single source of truth",
      "A space design for expression",
      "Action Planning",
    ],
  },
];

// Load all images
const loadedImages = await Promise.all(
  tabs.map(async (tab) => ({
    ...tab,
    loadedImage: await dynamicImportImage(tab.image),
  }))
);
---

<section class="hidden lg:block">
  <Pill color="purple">Focus on outcomes</Pill>
  <Heading class="my-6">More alignment, more success</Heading>
  <Subheading>
    Metro Retro lets you focus on what you want to achieve, not the process of
    learning complex tools and process
  </Subheading>

  <div class="mt-16 space-y-4 md:px-4 lg:hidden">
    {
      loadedImages.map((tab) => (
        <div>
          <button
            data-active="false"
            data-more-text={`More about ${tab.title}`}
            data-href={tab.href}
            data-body={tab.body}
            data-features={tab.features.join(",")}
            data-image={tab.loadedImage.src}
            class="peer text-body hover:text-purple data-[active=true]:bg-purple w-full rounded-[40px] border-2 border-white bg-white px-6 py-3 text-base/6 transition-colors hover:border-purple-100 hover:bg-purple-100 data-[active=true]:text-white"
          >
            {tab.title}
          </button>

          <div class="hidden peer-data-[active=true]:block">
            <div class="aspect-[1.53] w-full rounded-[20px] bg-blue-100 drop-shadow-[0_3px_12px_rgba(98,116,150,0.2)]">
              <Image
                src={tab.loadedImage}
                alt={tab.title}
                class="h-full w-full rounded-[20px] object-cover"
              />
            </div>
            <p class="text-lg/6 font-semibold text-black">{tab.body}</p>
            <div class="mt-6 mb-8 space-y-6">
              {tab.features.map((feature) => (
                <IconText text={feature} class="*:[svg]:text-purple" />
              ))}
            </div>
            <LinkArrowButton
              color="purple"
              id="outcome-more-link-mobile"
              href={tab.href}
            >
              {`More about ${tab.title}`}
            </LinkArrowButton>
          </div>
        </div>
      ))
    }
  </div>

  <div class="px-4">
    <div
      class="mx-auto my-16 hidden w-max items-center justify-center gap-[22px] py-3 max-xl:max-w-[calc(100vw-40px)] max-xl:flex-wrap lg:flex xl:rounded-[100px] xl:bg-white xl:px-[30px] xl:drop-shadow-[0_4px_20px_rgba(98,116,150,0.25)]"
    >
      {
        loadedImages.map((tab) => (
          <button
            data-active="false"
            data-more-text={`More about ${tab.title}`}
            data-href={tab.href}
            data-body={tab.body}
            data-features={tab.features.join(",")}
            data-image={tab.loadedImage.src}
            class="outcome-tab text-body hover:text-purple data-[active=true]:bg-purple rounded-[40px] border-2 border-gray-100 px-6 py-3 text-base/6 transition-colors hover:border-purple-100 hover:bg-purple-100 data-[active=true]:text-white max-xl:bg-white"
          >
            {tab.title}
          </button>
        ))
      }
    </div>
    <div
      class="mx-auto mt-16 hidden max-w-[1060px] grid-cols-[456px_1fr] gap-16 lg:grid"
    >
      <div>
        <p class="text-lg/6 font-semibold text-black">
          {loadedImages[0].body}
        </p>
        <div class="mt-6 mb-8 space-y-6">
          {
            loadedImages[0].features.map((feature) => (
              <IconText text={feature} class="*:[svg]:text-purple" />
            ))
          }
        </div>
        <LinkArrowButton
          color="purple"
          id="outcome-more-link-desktop"
          href={loadedImages[0].href}
        >
          {`More about ${loadedImages[0].title}`}
        </LinkArrowButton>
      </div>
      <div>
        <div
          class="aspect-[1.53] w-full rounded-[20px] bg-blue-100 drop-shadow-[0_3px_12px_rgba(98,116,150,0.2)]"
        >
          <Image
            src={loadedImages[0].loadedImage}
            alt={loadedImages[0].title}
            class="h-full w-full rounded-[20px] object-cover"
          />
        </div>
      </div>
    </div>
  </div>
</section>
<script>
  const tabs = [
    ...document.querySelectorAll(".outcome-tab"),
  ] as HTMLButtonElement[];

  const moreLinkMobile = document.getElementById(
    "outcome-more-link-mobile"
  ) as HTMLAnchorElement | null;

  const moreLinkDesktop = document.getElementById(
    "outcome-more-link-desktop"
  ) as HTMLAnchorElement | null;

  const mobileContent = document.querySelector(
    ".peer-data-[active=true]"
  ) as HTMLElement;

  const desktopContent = document.querySelector(
    ".lg\\:grid > div:first-child"
  ) as HTMLElement;

  const desktopImage = document.querySelector(
    ".lg\\:grid > div:last-child > div img"
  ) as HTMLImageElement;

  function setActiveTab(tab?: HTMLButtonElement | null) {
    if (!tab) return;

    tab.setAttribute("data-active", "true");

    const moreText = tab.getAttribute("data-more-text");

    const href = tab.getAttribute("data-href");

    const body = tab.getAttribute("data-body");

    const features = tab.getAttribute("data-features")?.split(",") || [];

    const image = tab.getAttribute("data-image");

    if (!moreText) return;

    if (moreLinkMobile) {
      moreLinkMobile.querySelector("span")!.textContent = moreText;
      if (href) {
        moreLinkMobile.href = href;
      }
    }

    if (moreLinkDesktop) {
      moreLinkDesktop.querySelector("span")!.textContent = moreText;
      if (href) {
        moreLinkDesktop.href = href;
      }
    }

    // Update desktop content
    if (desktopContent) {
      const desktopBody = desktopContent.querySelector("p");

      // Select the container for features to manage visibility of items
      const desktopFeaturesContainer = desktopContent.querySelector(
        ".mt-6.mb-8.space-y-6"
      );

      const desktopFeatureElements =
        desktopFeaturesContainer?.querySelectorAll(".icon-text"); // Select all feature elements within the container

      if (desktopBody && body) desktopBody.textContent = body;

      // Update features, showing/hiding elements as needed
      if (desktopFeatureElements && features.length) {
        const maxFeatures = desktopFeatureElements.length; // Max displayable features is based on initial render

        features.forEach((featureText, index) => {
          if (index < maxFeatures) {
            // Only update existing elements
            const featureElement = desktopFeatureElements[index] as HTMLElement; // Cast for style access

            const span = featureElement.querySelector("span");

            if (span) {
              span.textContent = featureText;
              featureElement.style.display = ""; // Ensure element is visible
            }
          }
          // Note: If features.length > maxFeatures, extra features won't be shown.
        });

        // Hide unused feature elements if the new tab has fewer features than initially rendered
        for (let i = features.length; i < maxFeatures; i++) {
          const featureElement = desktopFeatureElements[i] as HTMLElement; // Cast for style access

          featureElement.style.display = "none"; // Hide element
        }
      } else if (desktopFeatureElements) {
        // If there are no features for the selected tab, hide all feature elements
        desktopFeatureElements.forEach(
          (el) => ((el as HTMLElement).style.display = "none")
        );
      }
    }

    if (desktopImage && image) {
      desktopImage.src = image;
    }
  }

  setActiveTab(tabs[0]);

  tabs.forEach((tab) => {
    tab.addEventListener("click", () => {
      tabs.forEach((tab) => tab.setAttribute("data-active", "false"));
      setActiveTab(tab);
    });
  });
</script>
