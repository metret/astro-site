---
interface Props {
  templateId: string;
  fallbackSrc?: string;
}

const { templateId, fallbackSrc } = Astro.props;
---

{
  fallbackSrc && (
    <section>
      <div class="shadow-mr relative mx-auto max-w-[80rem] overflow-hidden rounded-4xl border-1 border-blue-200/15">
        <div class="">
          <div
            data-preview-activate
            class="absolute inset-0 hidden cursor-pointer opacity-0 hover:opacity-100 xl:block"
          >
            <div class="absolute top-1/2 left-1/2 z-10 flex -translate-x-1/2 -translate-y-1/2 items-center justify-center rounded-xl bg-blue-200/50 p-4 text-center text-2xl font-semibold text-white">
              Click for live preview
            </div>
          </div>
          <img
            src={fallbackSrc}
            alt="Template Preview"
            class="w-full object-cover"
          />
        </div>
      </div>
      <div
        class="fixed inset-0 z-50 bg-black/75"
        data-preview-frame
        style="opacity: 0; pointer-events: none"
      >
        <div class="absolute inset-16 overflow-hidden rounded-4xl bg-white">
          <div class="absolute inset-0" data-preview={templateId} />
          <div
            class="absolute top-4 right-4 cursor-pointer p-2"
            data-preview-close
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="currentColor"
              class="h-8 w-8 text-gray-300"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M6 18 18 6M6 6l12 12"
              />
            </svg>
          </div>
        </div>
      </div>
    </section>
  )
}

<script>
  const previewActivate = document.querySelector(
    "[data-preview-activate]"
  ) as HTMLElement;

  const previewClose = document.querySelector(
    "[data-preview-close]"
  ) as HTMLElement;

  const previewFrame = document.querySelector(
    "[data-preview-frame]"
  ) as HTMLElement;

  const preview = document.querySelector("[data-preview]") as HTMLElement;

  const templateId = preview.dataset.preview;

  const createIFrame = () => {
    const iframe = document.createElement("iframe");

    iframe.id = "metret-iframe";
    iframe.src = `https://metroretro.io/TP/${templateId}?ui=0&camera=auto`;
    iframe.frameBorder = "0";
    iframe.scrolling = "no";
    iframe.width = "100%";
    iframe.height = "100%";

    // Add event listener to handle escape key in iframe
    iframe.addEventListener("load", () => {
      iframe.contentWindow?.addEventListener(
        "keydown",
        (e) => {
          if (e.key === "Escape") {
            hide();
          }
        },
        { capture: true }
      );
    });

    return iframe;
  };

  const show = () => {
    previewFrame.style.opacity = "1";
    previewFrame.style.pointerEvents = "auto";
    preview.innerHTML = "";
    preview.appendChild(createIFrame());
  };

  const hide = () => {
    previewFrame.style.opacity = "0";
    previewFrame.style.pointerEvents = "none";
    preview.innerHTML = "";
  };

  previewActivate.addEventListener("click", show);
  previewClose.addEventListener("click", hide);

  // On escape, destroy the preview iframe
  window.addEventListener(
    "keydown",
    (e) => {
      if (e.key === "Escape") {
        hide();
      }
    },
    { capture: true }
  );
</script>
