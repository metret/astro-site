---
import CheckIcon from "./CheckIcon.astro";
import XIcon from "./XIcon.astro";

export interface Props {
  title: string;
  features: {
    name: string;
    values: (
      | string
      | boolean
      | {
          text: string;
          icon: boolean;
        }
    )[];
  }[];
  jumpFirstRow?: boolean;
}

const { features, title, jumpFirstRow = false } = Astro.props;

function resolveFeatureValues(
  value: Props["features"][number]["values"][number],
) {
  if (typeof value === "string" || typeof value === "boolean") {
    return [value];
  }

  return [value.icon, value.text];
}
---

{
  jumpFirstRow && (
    <tr>
      {Array.from({ length: 4 }).map(() => (
        <td>&nbsp;</td>
      ))}
    </tr>
  )
}
<tr>
  <td colspan={4}>
    <table class="feature-category w-full table-fixed" aria-expanded="true">
      <thead>
        <tr class="">
          <th colspan={4}>
            <div
              class="text-blue flex items-center justify-between border border-gray-200 bg-blue-100 px-4 py-2"
            >
              <p>{title}</p>
              <svg
                class="caret transform transition-transform duration-300"
                width="16"
                height="11"
                viewBox="0 0 16 11"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M15 9.5L8 2.5L1 9.5"
                  stroke="#3B65EF"
                  stroke-width="2.625"></path>
              </svg>
            </div>
          </th>
        </tr>
      </thead>
      <tbody class="divide-y divide-gray-200">
        {
          features.map((feature) => (
            <tr class="divide-x divide-gray-200 *:p-4 last:border-b last:border-gray-200">
              <td class="border-l border-gray-200 text-left">{feature.name}</td>
              {feature.values.map((value) => {
                const values = resolveFeatureValues(value);

                return (
                  <td class="border-gray-200 last:border-r">
                    <div class="flex items-center justify-center gap-2.5">
                      {values.map((value) => (
                        <>
                          {typeof value === "boolean" ? (
                            value ? (
                              <CheckIcon />
                            ) : (
                              <XIcon />
                            )
                          ) : (
                            <span>{value}</span>
                          )}
                        </>
                      ))}
                    </div>
                  </td>
                );
              })}
            </tr>
          ))
        }
      </tbody>
    </table>
  </td>
</tr>

<style>
  table.feature-category[aria-expanded="false"] .caret {
    rotate: 180deg;
  }
  table.feature-category[aria-expanded="false"] tbody * {
    display: none;
  }
</style>

<script>
  const fcTables = document.querySelectorAll(".feature-category");

  fcTables.forEach((table) => {
    const head = table.querySelector("thead") as HTMLElement;

    head.addEventListener("click", () => {
      const expanded = table.getAttribute("aria-expanded") === "true";

      table.setAttribute("aria-expanded", String(!expanded));
    });
  });
</script>
