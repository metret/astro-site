---
import { Image } from "astro:assets";
import logo from "~/assets/logo.svg";
import type { Link } from "~/types";
import LinkButton from "./ui/LinkButton.astro";
import { site } from "~/constants";

const links: (Link & { children?: { title?: string; items: Link[] }[] })[] = [
  {
    title: "Product",
    href: "#product",
    children: [
      {
        items: [
          {
            title: "Enhanced Interactivity",
            href: "#enhanced-interactivity",
          },
          {
            title: "Meetings & Workshops",
            href: "#meetings-workshops",
          },
          { title: "Task Tracking", href: "#task-tracking" },
          { title: "Templates", href: "#templates" },
          { title: "Jira integration", href: "#jira-integration" },
          { title: "Shareable Team Spaces", href: "#shareable-team-spaces" },
          { title: "Privacy & Anonymity", href: "#privacy-anonymity" },
          { title: "Security", href: "#security" },
        ],
      },
    ],
  },
  {
    title: "Solutions",
    href: "#solutions",
    children: [
      {
        title: "Roles",
        items: [
          {
            title: "Scrum Masters",
            href: "/solutions/scrum-masters",
          },
          {
            title: "Developers",
            href: "/solutions/developers",
          },
          {
            title: "Agile Coaches",
            href: "/solutions/agile-coaches",
          },
          {
            title: "Delivery Managers",
            href: "/solutions/delivery-managers",
          },
          { title: "Product Owners", href: "/solutions/product-owners" },
          {
            title: "Engineering Managers",
            href: "/solutions/engineering-managers",
          },
          {
            title: "Product Designers",
            href: "/solutions/product-designers",
          },
        ],
      },
      {
        title: "Focus",
        items: [
          {
            title: "Team Health",
            href: "/solutions/team-health",
          },
          {
            title: "Planning Ahead",
            href: "/solutions/planning-ahead",
          },
          { title: "Project Reviews", href: "/solutions/project-reviews" },
          {
            title: "Better Collaboration",
            href: "/solutions/better-collaboration",
          },
          { title: "Team Alignment", href: "/solutions/team-alignment" },
        ],
      },
      {
        title: "Use Cases",
        items: [
          {
            title: "Retrospectives",
            href: "/solutions/retrospectives",
          },
          {
            title: "Online Whiteboarding",
            href: "/solutions/online-whiteboarding",
          },
          {
            title: "Remote Collaboration",
            href: "/solutions/remote-collaboration",
          },
          {
            title: "Project Management",
            href: "/solutions/project-management",
          },
        ],
      },
    ],
  },
  { title: "Templates", href: "/templates" },
  {
    title: "Resources",
    href: "#resources",
    children: [
      {
        items: [
          {
            title: "Blog",
            href: "/blog",
          },
          { title: "Help", href: "https://docs.metroretro.io" },
          { title: "Support", href: "/support" },
          { title: "About Us", href: "/about" },
        ],
      },
    ],
  },
  { title: "Customers", href: "/customers" },
  {
    title: "Pricing",
    href: "/pricing",
  },
];
---

<section
  id="sidenav"
  data-open="false"
  class="sidebar-nav fixed inset-0 z-60 translate-x-full overflow-y-auto bg-black/10 opacity-0 transition-all duration-300 ease-in-out data-[open=true]:translate-x-0 data-[open=true]:opacity-100 xl:data-[open=true]:translate-x-full"
>
  <nav
    aria-label="sidebar navigation"
    class="xs:w-[344px] xs:ml-auto shadow-mr flex min-h-full w-full flex-col justify-between gap-5 bg-white p-6"
  >
    <div class="space-y-6">
      <div
        class="text-body sticky top-0 z-5 flex items-center justify-between bg-white/95 pl-2.5 text-lg/5 font-medium"
      >
        <div
          id="current-sidenav-item"
          data-has-icon="false"
          class="flex items-center gap-2.5"
        >
          <svg
            width="7"
            height="10"
            viewBox="0 0 7 10"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path d="M6 1L2 5L6 9" stroke="#627496" stroke-width="2"></path>
          </svg>

          <span id="sidenav-title">Menu</span>
        </div>
        <button
          id="btn-close-sidenav"
          aria-label="close navigation"
          type="button"
          class="flex size-12 items-center justify-center"
          ><svg
            width="18"
            height="18"
            viewBox="0 0 18 18"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M1.92871 16.071L16.0708 1.92891"
              stroke="#3B65EF"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"></path>
            <path
              d="M16.0708 16.071L1.92867 1.92891"
              stroke="#3B65EF"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"></path>
          </svg>
        </button>
      </div>
      <ul id="sidenav-links-container" class="relative space-y-5">
        {
          links.map((link) => {
            const hasChildren = Boolean(link.children?.length);

            return (
              <li
                class:list={[
                  "sidenav-link group/navlink relative",
                  hasChildren && "has-children",
                ]}
                data-link-title={link.title}
                data-open={false}
              >
                <a
                  href={hasChildren ? "#" : link.href}
                  class:list={[
                    "text-body hover:text-blue flex items-center justify-between p-2.5 text-lg/5 font-medium",
                    hasChildren &&
                      "flex items-center gap-2.5 group-[[data-open='true']]/navlink:hidden",
                  ]}
                >
                  {link.title}
                  {hasChildren && (
                    <svg
                      class="-rotate-90"
                      width="11"
                      height="7"
                      viewBox="0 0 11 7"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M1.41455 1.00002L5.41455 5.00002L9.41455 1.00002"
                        stroke="currentColor"
                        stroke-width="2"
                      />
                    </svg>
                  )}
                </a>

                {hasChildren && (
                  <div class="grid grid-rows-[0fr] transition-[grid-template-rows] duration-300 group-[[data-open='true']]/navlink:grid-rows-[1fr]">
                    <div class="overflow-hidden">
                      <ul class="h-full space-y-8">
                        {link.children?.map((child) => (
                          <li>
                            <div>
                              {child.title && (
                                <div class="py-3">
                                  <p class="text-body text-sm font-medium opacity-70">
                                    {child.title}
                                  </p>
                                </div>
                              )}
                              <ul class="space-y-2">
                                {child.items.map((item) => (
                                  <li>
                                    <a
                                      href={item.href}
                                      class="text-body hover:text-blue text-lg/8 font-medium"
                                    >
                                      {item.title}
                                    </a>
                                  </li>
                                ))}
                              </ul>
                            </div>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                )}
              </li>
            );
          })
        }
      </ul>
    </div>
    <div class="flex flex-col gap-5">
      <LinkButton kind="secondary" color="gray" href="/login" class="!w-full"
        >Login</LinkButton
      >
      <LinkButton href="/account/register" class="!w-full">Signup</LinkButton>
    </div>
  </nav>
</section>

<header
  id="main-header"
  data-sticky="false"
  class="group/nav-header data-[sticky=true]:shadow-mr sticky top-0 left-0 z-50 mb-4 w-full data-[sticky=true]:bg-white"
>
  <div
    id="inflatable"
    data-sticky="false"
    class="grid grid-rows-[0fr] transition-[grid-template-rows] duration-300 data-[sticky=false]:grid-rows-[1fr]"
  >
    <div class="overflow-hidden">
      <div class="h-5">&nbsp;</div>
    </div>
  </div>
  <nav
    aria-label="main navigation"
    class="mr-shadow mx-auto flex h-20 w-full max-w-[80rem] items-stretch justify-between rounded-full bg-white px-6 group-[[data-sticky='true']]/nav-header:bg-[transparent]"
  >
    <a href="/" class="flex items-center gap-3.5">
      <Image src={logo} width={34} height={36} alt={`${site.name} logo`} /><span
        class="font-rubik text-blue text-[28px] font-medium">Metro Retro</span
      >
    </a>
    <ul class="hidden items-center gap-7 min-xl:flex">
      {
        links.map((link) => {
          const hasChildren = Boolean(link.children?.length);

          return (
            <li class="group/navlink relative h-full">
              <a
                href={hasChildren ? "#" : link.href}
                class="text-body hover:text-blue block flex h-full items-center gap-2.5 text-lg/5 font-medium"
              >
                {link.title}
                {hasChildren && (
                  <svg
                    width="11"
                    height="7"
                    viewBox="0 0 11 7"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M1.41455 1.00002L5.41455 5.00002L9.41455 1.00002"
                      stroke="currentColor"
                      stroke-width="2"
                    />
                  </svg>
                )}
              </a>
              {hasChildren && (
                <div class="absolute top-full -left-6 ml-2.5 grid w-max grid-rows-[0fr] pt-2 transition-[grid-template-rows] duration-300 group-hover/navlink:grid-rows-[1fr] md:max-w-[660px]">
                    <div class="shadow-mr rounded-xl bg-white overflow-hidden">
                      <ul
                        style={{
                          "--items-count":
                            link.children!.length > 3
                              ? 3
                              : link.children!.length,
                        }}
                        class="grid w-max grid-cols-[repeat(var(--items-count),minmax(0,1fr))] gap-8 p-6 md:max-w-[660px]"
                      >
                        {link.children?.map((child) => (
                          <li>
                            <div>
                              {child.title && (
                                <div class="py-3">
                                  <p class="text-body text-sm font-medium opacity-70">
                                    {child.title}
                                  </p>
                                </div>
                              )}
                              <ul class="space-y-2">
                                {child.items.map((item) => (
                                  <li>
                                    <a
                                      href={item.href}
                                      class="text-body hover:text-blue text-lg/8 font-medium"
                                    >
                                      {item.title}
                                    </a>
                                  </li>
                                ))}
                              </ul>
                            </div>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </div>
              )}
            </li>
          );
        })
      }
    </ul>
    <div class="flex items-center gap-5">
      <div class="hidden items-center gap-5 md:flex">
        <LinkButton kind="secondary" color="gray" href="/login"
          >Login</LinkButton
        >
        <LinkButton href="/account/register">Signup</LinkButton>
      </div>
      <button
        id="btn-open-sidenav"
        type="button"
        class="min-xl:hidden"
        aria-label="Open navigation"
        ><svg
          width="22"
          height="18"
          viewBox="0 0 22 18"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M1 1H21"
            stroke="#3B65EF"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
          <path
            d="M1 9H21"
            stroke="#3B65EF"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
          <path
            d="M1 17H11"
            stroke="#3B65EF"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
        </svg>
      </button>
    </div>
  </nav>
</header>
<style>
  #current-sidenav-item[data-has-icon="false"] svg,
  #sidenav-links-container[data-active-link] [data-open="false"] {
    display: none;
  }
</style>

<script>
  const STICKY_ATTR = "data-sticky";

  const header = document.getElementById("main-header") as HTMLElement;

  const inflatableSpacer = document.getElementById(
    "inflatable",
  ) as HTMLDivElement;

  function handleListener() {
    if (window.scrollY > 1) {
      [header, inflatableSpacer].forEach((el) => {
        el.setAttribute(STICKY_ATTR, "true");
      });
    } else {
      [header, inflatableSpacer].forEach((el) => {
        el.setAttribute(STICKY_ATTR, "false");
      });
    }
  }

  window.addEventListener("scroll", handleListener);

  window.addEventListener("load", handleListener);
</script>

<script>
  const btnOpenMenu = document.getElementById(
    "btn-open-sidenav",
  ) as HTMLButtonElement;

  const btnCloseMenu = document.getElementById(
    "btn-close-sidenav",
  ) as HTMLButtonElement;

  const sidenav = document.getElementById("sidenav") as HTMLElement;

  const sidenavLinksContainer = sidenav.querySelector(
    "#sidenav-links-container",
  ) as HTMLDivElement;

  const linksWithChildren = [
    ...sidenav.querySelectorAll(".has-children"),
  ] as HTMLLIElement[];

  const currentSidenavItem = sidenav.querySelector(
    "#current-sidenav-item",
  ) as HTMLDivElement;

  const sidenavTitle = currentSidenavItem.querySelector(
    "#sidenav-title",
  ) as HTMLParagraphElement;

  function resetOpenNav() {
    linksWithChildren.forEach((group) => {
      group.setAttribute("data-open", "false");
    });
  }

  function resetProperties() {
    sidenavTitle.textContent = "Menu";
    currentSidenavItem.setAttribute("data-has-icon", "false");
    sidenavLinksContainer.removeAttribute("data-active-link");
    resetOpenNav();
  }

  currentSidenavItem.addEventListener("click", () => {
    if (currentSidenavItem.getAttribute("data-has-icon") === "true") {
      resetProperties();
    }
  });

  linksWithChildren.forEach((group) => {
    group.addEventListener("click", () => {
      resetProperties();
      const title = group.getAttribute("data-link-title");

      currentSidenavItem.setAttribute("data-has-icon", String(!!title));

      sidenavTitle.textContent = title || "Menu";
      sidenavLinksContainer.setAttribute("data-active-link", title || "Menu");
      group.setAttribute("data-open", "true");
    });
  });

  btnOpenMenu.addEventListener("click", () => {
    sidenav.setAttribute("data-open", "true");
  });

  btnCloseMenu.addEventListener("click", () => {
    resetProperties();
    sidenav.setAttribute("data-open", "false");
  });
</script>
